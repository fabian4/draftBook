(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{280:function(t,a,s){"use strict";s.r(a);var n=s(14),e=Object(n.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("blockquote",[a("p",[t._v("RDD是Spark对于分布式数据的统一抽象，用于囊括所有内存中和磁盘中的分布式数据实体。\nRDD的全称是Resilient Distributed Dataset，即 “弹性分布式数据集”。它定义了一系列分布式数据的基本属性与处理方法。")])]),t._v(" "),a("h1",{attrs:{id:"一、helloword"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一、helloword"}},[t._v("#")]),t._v(" 一、HelloWord")]),t._v(" "),a("h2",{attrs:{id:"首先来引入一个wordcount的例子"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#首先来引入一个wordcount的例子"}},[t._v("#")]),t._v(" 首先来引入一个WordCount的例子")]),t._v(" "),a("hr"),t._v(" "),a("div",{staticClass:"language-scala extra-class"},[a("pre",{pre:!0,attrs:{class:"language-scala"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("org"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("apache"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("spark"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("rdd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),t._v("RDD \n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// 这里的下划线"_"是占位符，代表数据文件的根目录 ')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" rootPath"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("String")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" _ "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" file"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("String")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string-interpolation"}},[a("span",{pre:!0,attrs:{class:"token id function"}},[t._v("s")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"')]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("${")]),a("span",{pre:!0,attrs:{class:"token expression"}},[t._v("rootPath")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('/text.txt"')])]),t._v(" \n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 读取文件内容 ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" lineRDD"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" RDD"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" spark"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sparkContext"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("textFile"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("file"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 以行为单位做分词 ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" wordRDD"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" RDD"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" lineRDD"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("flatMap"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("line "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("=>")]),t._v(" line"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("split"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('" "')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" cleanWordRDD"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" RDD"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" wordRDD"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("filter"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("word "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("word"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("equals"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 把RDD元素转换为（Key，Value）的形式 ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" kvRDD"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" RDD"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" cleanWordRDD"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("map"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("word "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("word"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 按照单词做分组计数 ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" wordCounts"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" RDD"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" kvRDD"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("reduceByKey"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("=>")]),t._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 打印词频最高的5个词汇 ")]),t._v("\nwordCounts"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("map"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("k"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" v"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("v"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" k"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sortByKey"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("take"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("看这段代码中的 RDD")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("源文件 -> lineRDD -> wordRDD -> cleadWordRDD -> kvRDD -> wordCounts\n")])])]),a("p",[t._v("在数据形态的转换过程中，每个RDD都会通过dependencies属性来记录它所依赖的前一个、或是多个RDD，简称“父RDD”。与此同时，RDD使用compute属性，来记录从父RDD到当前RDD的转换操作。")]),t._v(" "),a("p",[t._v("拿Word Count当中的wordRDD来举例，它的父RDD是lineRDD，因此，它的dependencies属性记录的是lineRDD。从lineRDD到wordRDD的转换，其所依赖的操作是flatMap，因此，wordRDD的compute属性，记录的是flatMap这个转换函数。而这其中的 "),a("code",[t._v("flatMap")]),t._v(" 、"),a("code",[t._v("filter")]),t._v("、"),a("code",[t._v("map")]),t._v("、"),a("code",[t._v("reduceByKey")]),t._v(" 就被称为算子。")]),t._v(" "),a("p",[t._v("RDD有四大属性：")]),t._v(" "),a("ul",[a("li",[t._v("partitions：数据分片 —— 即 数据实体的具体不同形态")]),t._v(" "),a("li",[t._v("partitioner：分片切割规则 —— 即 数据不同形态的划分规则")]),t._v(" "),a("li",[t._v("dependencies：RDD依赖 —— 即 对前一个或是多个RDD的依赖")]),t._v(" "),a("li",[t._v("compute：转换函数 —— 即 从上一种形态转变为当前形态的方式")])]),t._v(" "),a("h2",{attrs:{id:"rdd的编程模型和延迟计算"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rdd的编程模型和延迟计算"}},[t._v("#")]),t._v(" RDD的编程模型和延迟计算")]),t._v(" "),a("hr"),t._v(" "),a("blockquote",[a("p",[t._v("编程模型指导我们如何进行代码实现，而延迟计算是Spark分布式运行机制的基础。")])]),t._v(" "),a("ol",[a("li",[t._v("通过调用textFile API生成lineRDD，然后用flatMap算子把lineRDD转换为wordRDD；")]),t._v(" "),a("li",[t._v("接下来，filter算子对wordRDD做过滤，并把它转换为不带空串的cleanWordRDD；")]),t._v(" "),a("li",[t._v("然后，为了后续的聚合计算，map算子把cleanWordRDD又转换成元素为（Key，Value）对的kvRDD；")]),t._v(" "),a("li",[t._v("最终，我们调用reduceByKey做分组聚合，把kvRDD中的Value从1转换为单词计数。")])]),t._v(" "),a("blockquote",[a("p",[t._v("开发者调用的各类Transformations算子，并不立即执行计算，当且仅当开发者调用Actions算子时，之前调用的转换算子才会付诸执行。这就被称为 “"),a("strong",[t._v("延迟计算")]),t._v("”（Lazy Evaluation）。")])]),t._v(" "),a("h1",{attrs:{id:"二、rdd算子"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二、rdd算子"}},[t._v("#")]),t._v(" 二、RDD算子")]),t._v(" "),a("blockquote",[a("p",[t._v("Spark官网给出的算子：https://spark.apache.org/docs/latest/rdd-programming-guide.html")])]),t._v(" "),a("h2",{attrs:{id:"transformations类算子"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#transformations类算子"}},[t._v("#")]),t._v(" Transformations类算子")]),t._v(" "),a("hr"),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[t._v("适用范围")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("算子用途")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("算子合集")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("任意RDD")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("RDD内数据转化")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("map / flatmap / fliter / mapPartitons / mapPartitionsWithIndex")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("Parid RDD")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("RDD内数据聚合")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("groupByKey / sortByKey / reduceByKey / aggregateByKey")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("任意RDD")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("RDD间数据整合")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("union / intersection / join / cogroup / cartesian")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("任意RDD")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("数据整理")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("sample / distinct")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("任意RDD")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("数据分布")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("coalesce / repartition / repartitionAndSortWithinPartitions")])])])]),t._v(" "),a("h2",{attrs:{id:"actions类算子"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#actions类算子"}},[t._v("#")]),t._v(" Actions类算子")]),t._v(" "),a("hr"),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[t._v("适用范围")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("算子用途")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("算子集合")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("任意RDD")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("数据收集")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("collect / first / take / count / takeSample / takeOrdered")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("任意RDD")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("数据持久化")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("saveAsTextFile / saveAsSequenceFile / saveAsObjectFile")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("任意RDD")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("数据遍历")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("foreach")])])])])])}),[],!1,null,null,null);a.default=e.exports}}]);